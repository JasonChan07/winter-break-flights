trip_flights %>% dplyr::select(1:5)
nrow(trip_flights %>% dplyr::select(1:5))
flights %>% dplyr::select(1:5)
flights %>% dplyr::select(1:4, 1)
flights %>% dplyr::select([1:5, 1:5])
flights %>% dplyr::select([1:5, 1:5])
colnames(flights)
# flights taken since semester over
trip_flights <- flights %>%
filter(source_iata == 'SFO' & dest_iata == 'DCA' | # shohini to DC
source_iata == 'SFO' & dest_iata == 'DEN' | # jason, kiran to london
source_iata == 'DEN' & dest_iata == 'LHR' |
source_iata == 'LAX' & dest_iata == 'LHR' | # prabha to london
source_iata == 'SFO' & dest_iata == 'LHR' | # jeffrey, mihir to london
source_iata == 'LHR' & dest_iata == 'OPO' | # everyone to porto, technically stansted
source_iata == 'OPO' & dest_iata == 'LIS' | # everyone to lisbon
source_iata == 'LIS' & dest_iata == 'DXB'| # shohini to dubai
source_iata == 'DXB' & dest_iata == 'DEL' |
source_iata == 'LIS' & dest_iata == 'LHR' | # everyone to london, technically luton
source_iata == 'LHR' & dest_iata == 'BOM' | # jeffrey, mihir to mumbai
source_iata == 'LHR' & dest_iata == 'MUN' | # jason to munich
source_iata == 'MUN' & dest_iata == 'SFO') %>%  # jason to sfo
dplyr::select(source_iata, source_long, source_lat, dest_iata, dest_long, dest_lat)
View(trip_flights)
return(final_schema)
## Given a city and destination, generate schema
generateFlights <- function(df, source, dest) {
# obtain source city schema
source_schema <- df %>%
filter(source_iata == source) %>%
dplyr::select(source_iata, source_long, source_lat)
dest_schema <- df %>%
filter(dest_iata == dest) %>%
select(dest_iata, dest_long, dest_lat)
final_schema <- cbind(source_schema, dest_schema)
return(final_schema)
}
generateFlights(df = flights, source = 'DCA', dest = 'CMN')
x <- generateFlights(df = flights, source = 'DCA', dest = 'CMN')
## Given a city and destination, generate schema
generateFlights <- function(df, source, dest) {
# obtain source city schema
source_schema <- df %>%
filter(source_iata == source) %>%
dplyr::select(source_iata, source_long, source_lat)
dest_schema <- df %>%
filter(dest_iata == dest) %>%
dplyr::select(dest_iata, dest_long, dest_lat)
final_schema <- cbind(source_schema, dest_schema)
return(final_schema)
}
x <- generateFlights(df = flights, source = 'DCA', dest = 'CMN')
## Given a city and destination, generate schema
generateFlights <- function(df, source, dest) {
# obtain source city schema
source_schema <- df %>%
filter(source_iata == source) %>%
dplyr::select(source_iata, source_long, source_lat)[1, ]
dest_schema <- df %>%
filter(dest_iata == dest) %>%
dplyr::select(dest_iata, dest_long, dest_lat)[1, ]
final_schema <- cbind(source_schema, dest_schema)
return(final_schema)
}
x <- generateFlights(df = flights, source = 'DCA', dest = 'CMN')
## Given a city and destination, generate schema
generateFlights <- function(df, source, dest) {
# obtain source city schema
source_schema <- df %>%
filter(source_iata == source) %>%
dplyr::select(source_iata, source_long, source_lat)[1, ]
dest_schema <- df %>%
filter(dest_iata == dest) %>%
dplyr::select(dest_iata, dest_long, dest_lat)[1, ]
final_schema <- cbind(source_schema, dest_schema)
return(final_schema)
}
x <- generateFlights(df = flights, source = 'DCA', dest = 'CMN')
flights[1, ]
flights %>% select(source_iata == 'AER')[1,]
flights %>% select(source_iata == 'AER')[1,]
colnames(flights)
flights %>% select(source_iata == 'AER')
flights %>% dplyr::select(source_iata == 'AER')
colnames(flights)
flights$source_iata
flights %>% dplyr::select(source_iata == 'SFO')
flights %>% dplyr::filter(source_iata == 'SFO')
flights %>% dplyr::filter(source_iata == 'SFO')[1, ]
flights %>% dplyr::filter(source_iata == 'SFO')
flights %>% dplyr::filter(source_iata == 'SFO')[1, ]
## Given a city and destination, generate schema
generateFlights <- function(df, source, dest) {
# obtain source city schema
source_schema <- df %>%
filter(source_iata == source) %>%
dplyr::select(source_iata, source_long, source_lat)
dest_schema <- df %>%
filter(dest_iata == dest) %>%
dplyr::select(dest_iata, dest_long, dest_lat)
final_schema <- cbind(source_schema[1, ], dest_schema[1, ])
return(final_schema)
}
x <- generateFlights(df = flights, source = 'DCA', dest = 'CMN')
View(x)
## Given a city and destination, generate schema
generateFlights <- function(source, dest) {
# obtain source city schema
source_schema <- flights %>%
filter(source_iata == source) %>%
dplyr::select(source_iata, source_long, source_lat)
dest_schema <- flights %>%
filter(dest_iata == dest) %>%
dplyr::select(dest_iata, dest_long, dest_lat)
final_schema <- cbind(source_schema[1, ], dest_schema[1, ])
return(final_schema)
}
cities <- airports %>%
filter(iata %in% trip_flights$source_iata | iata %in% trip_flights$dest_iata) %>%
cbind(dca_cmn, cmn_opo, lhr_maa)
## Given a city and destination, generate schema
generateFlights <- function(source, dest) {
# obtain source city schema
source_schema <- flights %>%
filter(source_iata == source) %>%
dplyr::select(source_iata, source_long, source_lat)
dest_schema <- flights %>%
filter(dest_iata == dest) %>%
dplyr::select(dest_iata, dest_long, dest_lat)
final_schema <- cbind(source_schema[1, ], dest_schema[1, ])
return(final_schema)
}
dca_cmn <- generateFlights(source = 'DCA', dest = 'CMN')
cmn_opo <- generateFlights(source = 'CMN', dest = 'OPO')
lhr_maa <- generateFlights(source = 'LHR', dest = 'MAA')
cities <- airports %>%
filter(iata %in% trip_flights$source_iata | iata %in% trip_flights$dest_iata) %>%
cbind(dca_cmn, cmn_opo, lhr_maa)
cities <- airports %>%
filter(iata %in% trip_flights$source_iata | iata %in% trip_flights$dest_iata) %>%
rbind(dca_cmn, cmn_opo, lhr_maa)
cities <- airports %>%
filter(iata %in% trip_flights$source_iata | iata %in% trip_flights$dest_iata) %>%
rbind(dca_cmn, cmn_opo, lhr_maa)
## Given a city and destination, generate schema
generateFlights <- function(source, dest) {
# obtain source city schema
source_schema <- flights %>%
filter(source_iata == source) %>%
dplyr::select(source_iata, source_long, source_lat)
dest_schema <- flights %>%
filter(dest_iata == dest) %>%
dplyr::select(dest_iata, dest_long, dest_lat)
final_schema <- cbind(source_schema[1, ], dest_schema[1, ])
return(final_schema)
}
dca_cmn <- generateFlights(source = 'DCA', dest = 'CMN')
cmn_opo <- generateFlights(source = 'CMN', dest = 'OPO')
lhr_maa <- generateFlights(source = 'LHR', dest = 'MAA')
# flights taken since semester over
trip_flights <- flights %>%
filter(source_iata == 'SFO' & dest_iata == 'DCA' | # shohini to DC
source_iata == 'SFO' & dest_iata == 'DEN' | # jason, kiran to london
source_iata == 'DEN' & dest_iata == 'LHR' |
source_iata == 'LAX' & dest_iata == 'LHR' | # prabha to london
source_iata == 'SFO' & dest_iata == 'LHR' | # jeffrey, mihir to london
source_iata == 'LHR' & dest_iata == 'OPO' | # everyone to porto, technically stansted
source_iata == 'OPO' & dest_iata == 'LIS' | # everyone to lisbon
source_iata == 'LIS' & dest_iata == 'DXB'| # shohini to dubai
source_iata == 'DXB' & dest_iata == 'DEL' |
source_iata == 'LIS' & dest_iata == 'LHR' | # everyone to london, technically luton
source_iata == 'LHR' & dest_iata == 'BOM' | # jeffrey, mihir to mumbai
source_iata == 'LHR' & dest_iata == 'MUN' | # jason to munich
source_iata == 'MUN' & dest_iata == 'SFO') %>%  # jason to sfo
dplyr::select(source_iata, source_long, source_lat, dest_iata, dest_long, dest_lat) %>%
rbind(dca_cmn, cmn_opo, lhr_maa)
# cities for plotting
cities <- airports %>%
filter(iata %in% trip_flights$source_iata | iata %in% trip_flights$dest_iata)
# get great circles for each flight
gc_routes <- geosphere::gcIntermediate(trip_flights[c("source_long", "source_lat")],
trip_flights[c("dest_long", "dest_lat")],
n = 360, addStartEnd = TRUE, sp = TRUE,
breakAtDateLine = TRUE)
gc_routes_spatial <- sp::SpatialLinesDataFrame(gc_routes,
data.frame(route = trip_flights$route,
stringsAsFactors = FALSE))
## Given a city and destination, generate schema
generateFlights <- function(source, dest) {
# obtain source city schema
source_schema <- flights %>%
filter(source_iata == source) %>%
dplyr::select(route, source_iata, source_long, source_lat)
dest_schema <- flights %>%
filter(dest_iata == dest) %>%
dplyr::select(dest_iata, dest_long, dest_lat)
final_schema <- cbind(source_schema[1, ], dest_schema[1, ])
return(final_schema)
}
dca_cmn <- generateFlights(source = 'DCA', dest = 'CMN')
cmn_opo <- generateFlights(source = 'CMN', dest = 'OPO')
lhr_maa <- generateFlights(source = 'LHR', dest = 'MAA')
# flights taken since semester over
trip_flights <- flights %>%
filter(source_iata == 'SFO' & dest_iata == 'DCA' | # shohini to DC
source_iata == 'SFO' & dest_iata == 'DEN' | # jason, kiran to london
source_iata == 'DEN' & dest_iata == 'LHR' |
source_iata == 'LAX' & dest_iata == 'LHR' | # prabha to london
source_iata == 'SFO' & dest_iata == 'LHR' | # jeffrey, mihir to london
source_iata == 'LHR' & dest_iata == 'OPO' | # everyone to porto, technically stansted
source_iata == 'OPO' & dest_iata == 'LIS' | # everyone to lisbon
source_iata == 'LIS' & dest_iata == 'DXB'| # shohini to dubai
source_iata == 'DXB' & dest_iata == 'DEL' |
source_iata == 'LIS' & dest_iata == 'LHR' | # everyone to london, technically luton
source_iata == 'LHR' & dest_iata == 'BOM' | # jeffrey, mihir to mumbai
source_iata == 'LHR' & dest_iata == 'MUN' | # jason to munich
source_iata == 'MUN' & dest_iata == 'SFO') %>%  # jason to sfo
dplyr::select(route, source_iata, source_long, source_lat, dest_iata, dest_long, dest_lat) %>%
rbind(dca_cmn, cmn_opo, lhr_maa)
# get great circles for each flight
gc_routes <- geosphere::gcIntermediate(trip_flights[c("source_long", "source_lat")],
trip_flights[c("dest_long", "dest_lat")],
n = 360, addStartEnd = TRUE, sp = TRUE,
breakAtDateLine = TRUE)
gc_routes_spatial <- sp::SpatialLinesDataFrame(gc_routes,
data.frame(route = trip_flights$route,
stringsAsFactors = FALSE))
# convert to dataframe
world_df <- fortify(world)
gc_routes_df <- fortify(gc_routes_spatial)
ggplot() +
# world
geom_polygon(data = world_df, aes(long, lat, group = group),
fill = "grey80", color = "grey60", size = 0.1) +
# city points
geom_point(data = cities, aes(long, lat), color = "grey20", size = 0.5) +
# city text
geom_text(data = cities, aes(long, lat, label = city),
size = 2, color = "grey20", alpha = 0.9, nudge_y = 2,
check_overlap = TRUE) +
# routes
geom_path(data = gc_routes_df,
aes(long, lat, group = group), alpha = 0.5, color = "#fa6900") +
# aesthetics
coord_proj("+proj=kav7") +
scale_x_continuous(breaks = seq(-180, 180, 30)) +
scale_y_continuous(breaks = seq(-90, 90, 15)) +
theme(panel.grid.major = element_line(size = 0.5, linetype = 2),
axis.title = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank())
# manual flights
dca_cmn <- generateFlights(source = 'DCA', dest = 'CMN') %>%
rbind(generateFlights(source = 'CMN', dest = 'OPO'),
generateFlights(source = 'LHR', dest = 'MAA')
)
# manual flights
manual_flights <- generateFlights(source = 'DCA', dest = 'CMN') %>%
rbind(generateFlights(source = 'CMN', dest = 'OPO'),
generateFlights(source = 'LHR', dest = 'MAA')
)
# flights taken since semester over
trip_flights <- flights %>%
filter(source_iata == 'SFO' & dest_iata == 'DCA' | # shohini to DC
source_iata == 'SFO' & dest_iata == 'DEN' | # jason, kiran to london
source_iata == 'DEN' & dest_iata == 'LHR' |
source_iata == 'LAX' & dest_iata == 'LHR' | # prabha to london
source_iata == 'SFO' & dest_iata == 'LHR' | # jeffrey, mihir to london
source_iata == 'LHR' & dest_iata == 'OPO' | # everyone to porto, technically stansted
source_iata == 'OPO' & dest_iata == 'LIS' | # everyone to lisbon
source_iata == 'LIS' & dest_iata == 'DXB'| # shohini to dubai
source_iata == 'DXB' & dest_iata == 'DEL' |
source_iata == 'LIS' & dest_iata == 'LHR' | # everyone to london, technically luton
source_iata == 'LHR' & dest_iata == 'BOM' | # jeffrey, mihir to mumbai
source_iata == 'LHR' & dest_iata == 'MUN' | # jason to munich
source_iata == 'MUN' & dest_iata == 'SFO') %>%  # jason to sfo
dplyr::select(route, source_iata, source_long, source_lat, dest_iata, dest_long, dest_lat) %>%
rbind(manual_flights)
# flights taken since semester over
trip_flights <- flights %>%
filter(source_iata == 'SFO' & dest_iata == 'DCA' | # shohini to DC
source_iata == 'SFO' & dest_iata == 'DEN' | # jason, kiran to london
source_iata == 'DEN' & dest_iata == 'LHR' |
source_iata == 'LAX' & dest_iata == 'LHR' | # prabha to london
source_iata == 'SFO' & dest_iata == 'LHR' | # jeffrey, mihir to london
source_iata == 'LHR' & dest_iata == 'OPO' | # everyone to porto, technically stansted
source_iata == 'OPO' & dest_iata == 'LIS' | # everyone to lisbon
source_iata == 'LIS' & dest_iata == 'DXB'| # shohini to dubai
source_iata == 'DXB' & dest_iata == 'DEL' |
source_iata == 'LIS' & dest_iata == 'LHR' | # everyone to london, technically luton
source_iata == 'LHR' & dest_iata == 'BOM' | # jeffrey, mihir to mumbai
source_iata == 'LHR' & dest_iata == 'MUC' | # jason to munich
source_iata == 'MUN' & dest_iata == 'SFO') %>%  # jason to sfo
dplyr::select(route, source_iata, source_long, source_lat, dest_iata, dest_long, dest_lat) %>%
rbind(manual_flights)
# cities for plotting
cities <- airports %>%
filter(iata %in% trip_flights$source_iata | iata %in% trip_flights$dest_iata)
# get great circles for each flight
gc_routes <- geosphere::gcIntermediate(trip_flights[c("source_long", "source_lat")],
trip_flights[c("dest_long", "dest_lat")],
n = 360, addStartEnd = TRUE, sp = TRUE,
breakAtDateLine = TRUE)
gc_routes_spatial <- sp::SpatialLinesDataFrame(gc_routes,
data.frame(route = trip_flights$route,
stringsAsFactors = FALSE))
# convert to dataframe
world_df <- fortify(world)
gc_routes_df <- fortify(gc_routes_spatial)
ggplot() +
# world
geom_polygon(data = world_df, aes(long, lat, group = group),
fill = "grey80", color = "grey60", size = 0.1) +
# city points
geom_point(data = cities, aes(long, lat), color = "grey20", size = 0.5) +
# city text
geom_text(data = cities, aes(long, lat, label = city),
size = 2, color = "grey20", alpha = 0.9, nudge_y = 2,
check_overlap = TRUE) +
# routes
geom_path(data = gc_routes_df,
aes(long, lat, group = group), alpha = 0.5, color = "#fa6900") +
# aesthetics
coord_proj("+proj=kav7") +
scale_x_continuous(breaks = seq(-180, 180, 30)) +
scale_y_continuous(breaks = seq(-90, 90, 15)) +
theme(panel.grid.major = element_line(size = 0.5, linetype = 2),
axis.title = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank())
# flights taken since semester over
trip_flights <- flights %>%
filter(source_iata == 'SFO' & dest_iata == 'DCA' | # shohini to DC
source_iata == 'SFO' & dest_iata == 'DEN' | # jason, kiran to london
source_iata == 'DEN' & dest_iata == 'LHR' |
source_iata == 'LAX' & dest_iata == 'LHR' | # prabha to london
source_iata == 'SFO' & dest_iata == 'LHR' | # jeffrey, mihir to london
source_iata == 'LHR' & dest_iata == 'OPO' | # everyone to porto, technically stansted
source_iata == 'OPO' & dest_iata == 'LIS' | # everyone to lisbon
source_iata == 'LIS' & dest_iata == 'DXB'| # shohini to dubai
source_iata == 'DXB' & dest_iata == 'DEL' |
source_iata == 'LIS' & dest_iata == 'LHR' | # everyone to london, technically luton
source_iata == 'LHR' & dest_iata == 'BOM' | # jeffrey, mihir to mumbai
source_iata == 'LHR' & dest_iata == 'MUC' | # jason to munich
source_iata == 'MUC' & dest_iata == 'SFO') %>%  # jason to sfo
dplyr::select(route, source_iata, source_long, source_lat, dest_iata, dest_long, dest_lat) %>%
rbind(manual_flights)
# cities for plotting
cities <- airports %>%
filter(iata %in% trip_flights$source_iata | iata %in% trip_flights$dest_iata)
# get great circles for each flight
gc_routes <- geosphere::gcIntermediate(trip_flights[c("source_long", "source_lat")],
trip_flights[c("dest_long", "dest_lat")],
n = 360, addStartEnd = TRUE, sp = TRUE,
breakAtDateLine = TRUE)
gc_routes_spatial <- sp::SpatialLinesDataFrame(gc_routes,
data.frame(route = trip_flights$route,
stringsAsFactors = FALSE))
# convert to dataframe
world_df <- fortify(world)
gc_routes_df <- fortify(gc_routes_spatial)
ggplot() +
# world
geom_polygon(data = world_df, aes(long, lat, group = group),
fill = "grey80", color = "grey60", size = 0.1) +
# city points
geom_point(data = cities, aes(long, lat), color = "grey20", size = 0.5) +
# city text
geom_text(data = cities, aes(long, lat, label = city),
size = 2, color = "grey20", alpha = 0.9, nudge_y = 2,
check_overlap = TRUE) +
# routes
geom_path(data = gc_routes_df,
aes(long, lat, group = group), alpha = 0.5, color = "#fa6900") +
# aesthetics
coord_proj("+proj=kav7") +
scale_x_continuous(breaks = seq(-180, 180, 30)) +
scale_y_continuous(breaks = seq(-90, 90, 15)) +
theme(panel.grid.major = element_line(size = 0.5, linetype = 2),
axis.title = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank())
View(world_df)
View(gc_routes_df)
flights %>% dplyr::filter(source_iata == 'SFO')[1, ]
unique(gc_routes_df$group)
ggplot() +
# world
geom_polygon(data = world_df, aes(long, lat, group = group),
fill = "grey80", color = "grey60", size = 0.1) +
# city points
geom_point(data = cities, aes(long, lat), color = "grey20", size = 0.5) +
# city text
geom_text(data = cities, aes(long, lat, label = city),
size = 2, color = "grey20", alpha = 0.9, nudge_y = 2,
check_overlap = TRUE) +
# routes
geom_path(data = gc_routes_df,
aes(long, lat, group = group, colour = group), alpha = 0.5, color = "#fa6900") +
# aesthetics
coord_proj("+proj=kav7") +
scale_x_continuous(breaks = seq(-180, 180, 30)) +
scale_y_continuous(breaks = seq(-90, 90, 15)) +
theme(panel.grid.major = element_line(size = 0.5, linetype = 2),
axis.title = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank())
ggplot() +
# world
geom_polygon(data = world_df, aes(long, lat, group = group),
fill = "grey80", color = "grey60", size = 0.1) +
# city points
geom_point(data = cities, aes(long, lat), color = "grey20", size = 0.5) +
# city text
geom_text(data = cities, aes(long, lat, label = city),
size = 2, color = "grey20", alpha = 0.9, nudge_y = 2,
check_overlap = TRUE) +
# routes
geom_path(data = gc_routes_df,
aes(long, lat, group = group, fill = group), alpha = 0.5, color = "#fa6900") +
# aesthetics
coord_proj("+proj=kav7") +
scale_x_continuous(breaks = seq(-180, 180, 30)) +
scale_y_continuous(breaks = seq(-90, 90, 15)) +
theme(panel.grid.major = element_line(size = 0.5, linetype = 2),
axis.title = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank())
ggplot() +
# world
geom_polygon(data = world_df, aes(long, lat, group = group),
fill = "grey80", color = "grey60", size = 0.1) +
# city points
geom_point(data = cities, aes(long, lat), color = "grey20", size = 0.5) +
# city text
geom_text(data = cities, aes(long, lat, label = city),
size = 2, color = "grey20", alpha = 0.9, nudge_y = 2,
check_overlap = TRUE) +
# routes
geom_path(data = gc_routes_df,
aes(long, lat, colour = group), alpha = 0.5, color = "#fa6900") +
# aesthetics
coord_proj("+proj=kav7") +
scale_x_continuous(breaks = seq(-180, 180, 30)) +
scale_y_continuous(breaks = seq(-90, 90, 15)) +
theme(panel.grid.major = element_line(size = 0.5, linetype = 2),
axis.title = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank())
ggplot() +
# world
geom_polygon(data = world_df, aes(long, lat, group = group),
fill = "grey80", color = "grey60", size = 0.1) +
# city points
geom_point(data = cities, aes(long, lat), color = "grey20", size = 0.5) +
# city text
geom_text(data = cities, aes(long, lat, label = city),
size = 2, color = "grey20", alpha = 0.9, nudge_y = 2,
check_overlap = TRUE) +
# routes
geom_path(data = gc_routes_df,
aes(long, lat, group = group), alpha = 0.5, color = group) +
# aesthetics
coord_proj("+proj=kav7") +
scale_x_continuous(breaks = seq(-180, 180, 30)) +
scale_y_continuous(breaks = seq(-90, 90, 15)) +
theme(panel.grid.major = element_line(size = 0.5, linetype = 2),
axis.title = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank())
ggplot() +
# world
geom_polygon(data = world_df, aes(long, lat, group = group),
fill = "grey80", color = "grey60", size = 0.1) +
# city points
geom_point(data = cities, aes(long, lat), color = "grey20", size = 0.5) +
# city text
geom_text(data = cities, aes(long, lat, label = city),
size = 2, color = "grey20", alpha = 0.9, nudge_y = 2,
check_overlap = TRUE) +
# routes
geom_path(data = gc_routes_df,
aes(long, lat, group = group), alpha = 0.5, color = "#fa6900") +
# aesthetics
coord_proj("+proj=kav7") +
scale_x_continuous(breaks = seq(-180, 180, 30)) +
scale_y_continuous(breaks = seq(-90, 90, 15)) +
theme(panel.grid.major = element_line(size = 0.5, linetype = 2),
axis.title = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank())
ggplot() +
# world
geom_polygon(data = world_df, aes(long, lat, group = group),
fill = "grey80", color = "grey60", size = 0.1) +
# city points
geom_point(data = cities, aes(long, lat), color = "grey20", size = 0.5) +
# city text
geom_text(data = cities, aes(long, lat, label = city),
size = 3, color = "grey20", alpha = 0.9, nudge_y = 2,
check_overlap = TRUE) +
# routes
geom_path(data = gc_routes_df,
aes(long, lat, group = group), alpha = 0.5, color = "#fa6900") +
# aesthetics
coord_proj("+proj=kav7") +
scale_x_continuous(breaks = seq(-180, 180, 30)) +
scale_y_continuous(breaks = seq(-90, 90, 15)) +
theme(panel.grid.major = element_line(size = 0.5, linetype = 2),
axis.title = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank())
