arbitration_plot <- ggplot(data = data %>% filter(arb_dummy == 1), aes(x = log_salary) )+
geom_histogram(binwidth = 0.1) +
labs(title = 'Log Salary (Arbitration)')
grid.arrange(free_agent_plot, arbitration_plot, ncol = 2)
# Salary by free agency type
free_agent_plot <- ggplot(data = data %>% filter(free_dummy == 1), aes(x = log_salary) )+
geom_histogram(binwidth = 0.1, fill = 'dodgerblue1') +
labs(title = 'Log Salary (Free Agents)')
# Salary by free agency type
free_agent_plot <- ggplot(data = data %>% filter(free_dummy == 1), aes(x = log_salary) )+
geom_histogram(binwidth = 0.1, fill = 'dodgerblue1') +
labs(title = 'Log Salary (Free Agents)')
arbitration_plot <- ggplot(data = data %>% filter(arb_dummy == 1), aes(x = log_salary) )+
geom_histogram(binwidth = 0.1) +
labs(title = 'Log Salary (Arbitration)')
grid.arrange(free_agent_plot, arbitration_plot, ncol = 2)
# Salary by free agency type
free_agent_plot <- ggplot(data = data %>% filter(free_dummy == 1), aes(x = log_salary) )+
geom_histogram(binwidth = 0.1, fill = 'dodgerblue1') +
labs(title = 'Log Salary (Free Agents)')
arbitration_plot <- ggplot(data = data %>% filter(arb_dummy == 1), aes(x = log_salary) )+
geom_histogram(binwidth = 0.1, fill = 'tomato1') +
labs(title = 'Log Salary (Arbitration)')
grid.arrange(free_agent_plot, arbitration_plot, ncol = 2)
# Salary by free agency type
free_agent_plot <- ggplot(data = data %>% filter(free_dummy == 1), aes(x = log_salary) )+
geom_histogram(binwidth = 0.1, fill = 'lightskyblue1') +
labs(title = 'Log Salary (Free Agents)')
arbitration_plot <- ggplot(data = data %>% filter(arb_dummy == 1), aes(x = log_salary) )+
geom_histogram(binwidth = 0.1, fill = 'tomato1') +
labs(title = 'Log Salary (Arbitration)')
grid.arrange(free_agent_plot, arbitration_plot, ncol = 2)
# Salary by free agency type
free_agent_plot <- ggplot(data = data %>% filter(free_dummy == 1), aes(x = log_salary) )+
geom_histogram(binwidth = 0.1, fill = 'lightskyblue2') +
labs(title = 'Log Salary (Free Agents)')
arbitration_plot <- ggplot(data = data %>% filter(arb_dummy == 1), aes(x = log_salary) )+
geom_histogram(binwidth = 0.1, fill = 'tomato1') +
labs(title = 'Log Salary (Arbitration)')
grid.arrange(free_agent_plot, arbitration_plot, ncol = 2)
# Salary by free agency type
free_agent_plot <- ggplot(data = data %>% filter(free_dummy == 1), aes(x = log_salary) )+
geom_histogram(binwidth = 0.1, fill = 'lightskyblue2') +
labs(title = 'Log Salary (Free Agents)')
arbitration_plot <- ggplot(data = data %>% filter(arb_dummy == 1), aes(x = log_salary) )+
geom_histogram(binwidth = 0.1, fill = 'coral1') +
labs(title = 'Log Salary (Arbitration)')
grid.arrange(free_agent_plot, arbitration_plot, ncol = 2)
# Salary by free agency type
free_agent_plot <- ggplot(data = data %>% filter(free_dummy == 1), aes(x = log_salary) )+
geom_histogram(binwidth = 0.1, fill = 'lightskyblue2') +
labs(title = 'Log Salary (Free Agents)')
arbitration_plot <- ggplot(data = data %>% filter(arb_dummy == 1), aes(x = log_salary) )+
geom_histogram(binwidth = 0.1, fill = 'lightcoral') +
labs(title = 'Log Salary (Arbitration)')
grid.arrange(free_agent_plot, arbitration_plot, ncol = 2)
# Salary by free agency type
free_agent_plot <- ggplot(data = data %>% filter(free_dummy == 1), aes(x = log_salary) )+
geom_histogram(binwidth = 0.1, fill = 'lightskyblue2') +
labs(title = 'Log Salary (Free Agents)')
arbitration_plot <- ggplot(data = data %>% filter(arb_dummy == 1), aes(x = log_salary) )+
geom_histogram(binwidth = 0.1, fill = 'lightcoral') +
labs(title = 'Log Salary (Arbitration)')
other_plot<- ggplot(data = data %>% filter(arb_dummy != 1 & free_dummy != 1), aes(x = log_salary) )+
geom_histogram(binwidth = 0.1, fill = 'darkseagreen1') +
labs(title = 'Log Salary (Other)')
grid.arrange(free_agent_plot, arbitration_plot, ncol = 2)
#
# Salary by free agency type
free_agent_plot <- ggplot(data = data %>% filter(free_dummy == 1), aes(x = log_salary) )+
geom_histogram(binwidth = 0.1, fill = 'lightskyblue2') +
labs(title = 'Log Salary (Free Agents)')
arbitration_plot <- ggplot(data = data %>% filter(arb_dummy == 1), aes(x = log_salary) )+
geom_histogram(binwidth = 0.1, fill = 'lightcoral') +
labs(title = 'Log Salary (Arbitration)')
other_plot<- ggplot(data = data %>% filter(arb_dummy != 1 & free_dummy != 1), aes(x = log_salary) )+
geom_histogram(binwidth = 0.1, fill = 'darkseagreen1') +
labs(title = 'Log Salary (Other)')
grid.arrange(free_agent_plot, arbitration_plot, other_plot, ncol = 3)
#
# Salary by free agency type
free_agent_plot <- ggplot(data = data %>% filter(free_dummy == 1), aes(x = log_salary) )+
geom_histogram(binwidth = 0.1, fill = 'lightskyblue2') +
labs(title = 'Log Salary (Free Agents)')
arbitration_plot <- ggplot(data = data %>% filter(arb_dummy == 1), aes(x = log_salary) )+
geom_histogram(binwidth = 0.1, fill = 'lightcoral') +
labs(title = 'Log Salary (Arbitration)')
other_plot<- ggplot(data = data %>% filter(arb_dummy != 1 & free_dummy != 1), aes(x = log_salary) )+
geom_histogram(binwidth = 0.1, fill = 'palegreen1') +
labs(title = 'Log Salary (Other)')
grid.arrange(free_agent_plot, arbitration_plot, other_plot, ncol = 3)
#
# Salary by free agency type
free_agent_plot <- ggplot(data = data %>% filter(free_dummy == 1), aes(x = log_salary) )+
geom_histogram(binwidth = 0.1, fill = 'lightskyblue2') +
labs(title = 'Log Salary (Free Agents)')
arbitration_plot <- ggplot(data = data %>% filter(arb_dummy == 1), aes(x = log_salary) )+
geom_histogram(binwidth = 0.1, fill = 'lightcoral') +
labs(title = 'Log Salary (Arbitration)')
other_plot<- ggplot(data = data %>% filter(arb_dummy != 1 & free_dummy != 1), aes(x = log_salary) )+
geom_histogram(binwidth = 0.1, fill = 'grey67') +
labs(title = 'Log Salary (Other)')
grid.arrange(free_agent_plot, arbitration_plot, other_plot, ncol = 3)
#
# correlation between some variables and salary
hr <- ggplot(data = data, aes(x = hr, y = log_salary)) +
geom_point()
hr
# correlation between some variables and salary
hr <- ggplot(data = data, aes(x = hr, y = salary)) +
geom_point()
hr
# correlation between some variables and salary
hr <- ggplot(data = data, aes(x = hr, y = log_salary)) +
geom_point()
# Salary by free agency type
free_agent_plot <- ggplot(data = data %>% filter(free_dummy == 1), aes(x = log_salary) )+
geom_histogram(binwidth = 0.1, fill = 'lightskyblue2') +
labs(title = 'Log Salary (Free Agents)')
arbitration_plot <- ggplot(data = data %>% filter(arb_dummy == 1), aes(x = log_salary) )+
geom_histogram(binwidth = 0.1, fill = 'lightcoral') +
labs(title = 'Log Salary (Arbitration)')
other_plot<- ggplot(data = data %>% filter(arb_dummy != 1 & free_dummy != 1), aes(x = log_salary) )+
geom_histogram(binwidth = 0.1, fill = 'grey67') +
labs(title = 'Log Salary (Other)')
grid.arrange(free_agent_plot, arbitration_plot, other_plot, ncol = 3)
# correlation between some variables and salary
hr <- ggplot(data = data, aes(x = hr, y = log_salary)) +
geom_point()
so <- ggplot(data = data, aes(x = so, y = log_salary)) +
geom_point()
so
crbi <- ggplot(data = data, aes(x = crbi, y = log_salary)) +
geom_point()
crbi
grid.arrange(hr, so, crbi, ncol = 3)
geom_smooth(method = 'lm)
crbi <- ggplot(data = data, aes(x = crbi, y = log_salary)) +
geom_point() +
geom_smooth(method = 'lm')
grid.arrange(hr, so, crbi, ncol = 3)
crbi <- ggplot(data = data, aes(x = crbi, y = log_salary)) +
geom_point() +
geom_smooth(method = 'lm')
grid.arrange(hr, so, crbi, ncol = 3)
# correlation between some variables and salary
hr <- ggplot(data = data, aes(x = hr, y = log_salary)) +
geom_point() +
geom_smooth(method = 'lm')
so <- ggplot(data = data, aes(x = so, y = log_salary)) +
geom_point()+
geom_smooth(method = 'lm')
crbi <- ggplot(data = data, aes(x = crbi, y = log_salary)) +
geom_point() +
geom_smooth(method = 'lm')
grid.arrange(hr, so, crbi, ncol = 3)
# correlation between some variables and salary
hr <- ggplot(data = data, aes(x = hr, y = log_salary)) +
geom_point() +
geom_smooth(method = 'lm') +
labs(x = 'Home Runs', y = 'Log Salary')
labs(x = 'Career Runs Batted In', y = 'Log Salary)
# correlation between some variables and salary
hr <- ggplot(data = data, aes(x = hr, y = log_salary)) +
geom_point() +
labs(x = 'Home Runs', y = 'Log Salary')
so <- ggplot(data = data, aes(x = so, y = log_salary)) +
geom_point()+
labs(x = 'Strikeouts', y = 'Log Salary')
# correlation between some variables and salary
hr <- ggplot(data = data, aes(x = hr, y = log_salary)) +
geom_point() +
labs(x = 'Home Runs', y = 'Log Salary')
so <- ggplot(data = data, aes(x = so, y = log_salary)) +
geom_point()+
labs(x = 'Strikeouts', y = 'Log Salary')
crbi <- ggplot(data = data, aes(x = crbi, y = log_salary)) +
geom_point() +
labs(x = 'Career Runs Batted In', y = 'Log Salary')
grid.arrange(hr, so, crbi, ncol = 3)
# correlation between some variables and salary
hr <- ggplot(data = data, aes(x = hr, y = log_salary)) +
geom_point(color = 'steelblue2') +
labs(x = 'Home Runs', y = 'Log Salary')
grid.arrange(hr, so, crbi, ncol = 3)
so <- ggplot(data = data, aes(x = so, y = log_salary)) +
geom_point(color = 'indianred1')+
labs(x = 'Strikeouts', y = 'Log Salary')
crbi <- ggplot(data = data, aes(x = crbi, y = log_salary)) +
geom_point() +
labs(x = 'Career Runs Batted In', y = 'Log Salary')
grid.arrange(hr, so, crbi, ncol = 3)
crbi <- ggplot(data = data, aes(x = crbi, y = log_salary)) +
geom_point(color = 'palegreen1') +
labs(x = 'Career Runs Batted In', y = 'Log Salary')
grid.arrange(hr, so, crbi, ncol = 3)
crbi <- ggplot(data = data, aes(x = crbi, y = log_salary)) +
geom_point(color = 'palegreen4') +
labs(x = 'Career Runs Batted In', y = 'Log Salary')
grid.arrange(hr, so, crbi, ncol = 3)
library(corrplot)
install.packages('corrplot')
library(corrplot)
# correlation between all variables
rquery.cormat(data)
source("http://www.sthda.com/upload/rquery_cormat.r")
# correlation between all variables
rquery.cormat(data)
# correlation between all variables
rquery.cormat(data, type = 'upper')
library(RColorBrewer)
corrplot(data_corr, type="upper", order="hclust",
col=brewer.pal(n=8, name="RdYlBu"))
# correlation between all variables
data_corr <- cor(data)
corrplot(data_corr, type="upper", order="hclust",
col=brewer.pal(n=8, name="RdYlBu"))
corrplot(data_corr, type = "upper", order = "hclust",
col = brewer.pal(n = 10, name = "RdYlBu"))
corrplot(data_corr, type = "upper", order = "hclust",
col = brewer.pal(n = 20, name = "RdYlBu"))
corrplot(data_corr, type = "upper", order = "hclust",
col = brewer.pal(n = 8, name = "RdYlBu"))
# correlation between variables
corr_dat <- data %>% filter(ends_with('dummy'))
# correlation between variables
corr_dat <- data %>% select(ends_with('dummy'))
View(corr_dat)
# correlation between variables
corr_dat <- data %>% select(-ends_with('dummy'))
data_corr <- cor(corr_dat)
corrplot(data_corr, type = "upper", order = "hclust",
col = brewer.pal(n = 8, name = "RdYlBu"))
# correlation between variables
corr_dat <- data %>% select(-ends_with('dummy') | -starts_with('log'))
# Salary by free agency type
free_agent_plot <- ggplot(data = data %>% filter(free_dummy == 1), aes(x = log_salary) )+
geom_histogram(binwidth = 0.1, fill = 'lightskyblue2') +
labs(title = 'Log Salary (Free Agents)')
arbitration_plot <- ggplot(data = data %>% filter(arb_dummy == 1), aes(x = log_salary) )+
geom_histogram(binwidth = 0.1, fill = 'lightcoral') +
labs(title = 'Log Salary (Arbitration)')
other_plot<- ggplot(data = data %>% filter(arb_dummy != 1 & free_dummy != 1), aes(x = log_salary) )+
geom_histogram(binwidth = 0.1, fill = 'grey67') +
labs(title = 'Log Salary (Other)')
grid.arrange(free_agent_plot, arbitration_plot, other_plot, ncol = 3)
# correlation between some variables and salary
hr <- ggplot(data = data, aes(x = hr, y = log_salary)) +
geom_point(color = 'steelblue2') +
labs(x = 'Home Runs', y = 'Log Salary')
so <- ggplot(data = data, aes(x = so, y = log_salary)) +
geom_point(color = 'indianred1')+
labs(x = 'Strikeouts', y = 'Log Salary')
crbi <- ggplot(data = data, aes(x = crbi, y = log_salary)) +
geom_point(color = 'palegreen4') +
labs(x = 'Career Runs Batted In', y = 'Log Salary')
grid.arrange(hr, so, crbi, ncol = 3)
# correlation between variables
corr_dat <- data %>% select(-ends_with('dummy')) %>%
select(-starts_with('log'))
data_corr <- cor(corr_dat)
corrplot(data_corr, type = "upper", order = "hclust",
col = brewer.pal(n = 8, name = "RdYlBu"))
View(corr_dat)
# correlation between variables
corr_dat <- data %>% select(-ends_with('dummy'), -starts_with('log'), -starts_with('x'))
data_corr <- cor(corr_dat)
corrplot(data_corr, type = "upper", order = "hclust",
col = brewer.pal(n = 8, name = "RdYlBu"))
data_reg <- data %>%
select(-c(years, salary, cr))
reg_3 <- lm(log_salary ~ ., data_reg)
summary(reg_3)
best_models <- regsubsets(as.formula(reg_3), data = data_reg, method = 'forward', nvmax = 40)
reg_summary <- summary(best_models)
bic <- as.data.frame(reg_summary$bic)
names(bic) <- "BIC"
bic %>%
ggvis(x=~ c(1:nrow(bic)), y=~BIC ) %>%
layer_points(fill = ~ BIC ) %>%
add_axis("y", title = "BIC") %>%
add_axis("x", title = "Number of variables")
# 5 best models by bic
doBy::which.minn(reg_summary$bic, 5)
get_model_formula <- function(id, object, outcome){
# get models data
models <- summary(object)$which[id,-1]
# Get model predictors
predictors <- names(which(models == TRUE))
predictors <- paste(predictors, collapse = "+")
# Build model formula
as.formula(paste0(outcome, "~", predictors))
}
# best 9 variable model
best_9 <- get_model_formula(9, best_models, 'log_salary')
# best 10 variable model
best_10 <- get_model_formula(10, best_models, 'log_salary')
# best 11 variable model
best_11 <- get_model_formula(11, best_models, 'log_salary')
# best 12 variable model
best_12 <- get_model_formula(12, best_models, 'log_salary')
# best 8 variable model
best_8 <- get_model_formula(8, best_models, 'log_salary')
# models ranked by BIC
bic_models <- as.data.frame(cbind(seq(8,12), bic[8:12,]))
colnames(bic_models) <- c('Model Size', 'BIC')
bic_models %>%
arrange(BIC) %>%
kable() %>%
kable_styling()
# 5 best models by bic
doBy::which.minn(reg_summary$bic, 5)
# generate 10-fold cv mse for a given model formula
get_cv_mse <- function(formula, data) {
train.control <- trainControl(method = "cv", number = 10)
cv <- train(formula, data = data, method = "lm",
trControl = train.control)
cv$results$RMSE^2
}
# evaluate mse for given formulas
rank_best_formulas <- function(formulas) {
mse = c()
for (i in formulas) {
error = get_cv_mse(formula = i, data = data_reg)
mse = c(mse, error)
}
return(mse)
}
formulas <- c(best_8, best_9, best_10, best_11, best_12)
formula_cv <- rank_best_formulas(formulas = formulas)
# models ranked by cv_mse
cv_models <- as.data.frame(cbind(seq(8, 12), formula_cv))
colnames(cv_models) <- c('Model Size', 'CV_MSE')
cv_models %>%
arrange(CV_MSE) %>%
kable() %>%
kable_styling()
bic_models %>%
arrange(BIC) %>%
kable() %>%
kable_styling()
# create model matrix
X = model.matrix(log_salary ~ ., data = data_reg)[, -1]
y = data_reg$log_salary
# lasso
lasso <- glmnet(x = X, y = y, alpha = 1)
cv_lasso <- cv.glmnet(x = X, y = y, alpha = 1, nfolds = 10)
plot(cv_lasso)
best_lambda <- cv_lasso$lambda.min
lasso_coefs <- predict(lasso, type = 'coefficients', s = best_lambda)
lasso_coefs
# compare lasso cv_mse to stepwise models
min(cv_lasso$cvm)
# compare lasso cv_mse to stepwise models
mean(cv_lasso$cvm)
cv_models %>%
arrange(CV_MSE) %>%
kable() %>%
kable_styling()
lasso_coefs
lasso_coefs
# compare lasso cv_mse to stepwise models
mean(cv_lasso$cvm)
min(cv_lasso$cvm)
gc_routes_df <- fortify(gc_routes_spatial)
ggplot() +
# world
geom_polygon(data = world_df, aes(long, lat, group = group),
fill = "grey80", color = "grey60", size = 0.1) +
# city points
geom_point(data = cities, aes(long, lat), color = "grey20", size = 0.5) +
# city text
geom_text(data = cities, aes(long, lat, label = city),
size = 3, color = "grey20", alpha = 0.9, nudge_y = 2,
check_overlap = TRUE) +
# routes
geom_path(data = gc_routes_df,
aes(long, lat, group = group), alpha = 0.5, color = "#fa6900") +
# aesthetics
coord_proj("+proj=kav7") +
scale_x_continuous(breaks = seq(-180, 180, 30)) +
scale_y_continuous(breaks = seq(-90, 90, 15)) +
theme(panel.grid.major = element_line(size = 0.5, linetype = 2),
axis.title = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank())
library(data.table)
airports_original <- data.table::fread('airports.csv', data.table = FALSE)
routes_original <- data.table::fread('routes.csv', data.table = FALSE)
library(dplyr)
library(ggplot2)
library(data.table)
library(knitr)
library(geosphere)
library(rgdal)
library(raster)
library(sf)
library(ggalt)
setwd('/Users/jasonchan/Documents/DataProjects/flights')
# load data
airports_original <- data.table::fread('airports.csv', data.table = FALSE)
routes_original <- data.table::fread('routes.csv', data.table = FALSE)
#########################
### CLEAN ROUTES DATA ###
#########################
routes <- routes_original %>%
# keep source and destination columns
dplyr::select(V4, V6) %>%
# change column type to numeric
mutate_all(as.numeric) %>%
# rename columns
rename('source_id' = V4, 'dest_id' = V6)
###########################
### CLEAN AIRPORTS DATA ###
###########################
airports <- airports_original %>%
# keep airport names, airport id's, coordinates
dplyr::select(V1, V2, V3, V5, V7, V8) %>%
# rename columns
rename('id' = V1, 'name'= V2, 'city' = V3, 'iata' = V5, 'lat' = V7, 'long' = V8)
###############
### COMBINE ###
###############
flights <- routes %>%
# obtain city, iata, lat, long for source airports
inner_join(dplyr::select(airports, id, city, iata, lat, long),
by = c('source_id' = 'id')) %>%
# rename columns
rename('source_city' = city, 'source_iata' = iata, 'source_lat' = lat, 'source_long' = long) %>%
# obtain city, iata, lat, long for dest airports
inner_join(dplyr::select(airports, id, city, iata, lat, long),
by = c('dest_id' = 'id')) %>%
# rename column
rename('dest_city' = city, 'dest_iata' = iata, 'dest_lat' = lat, 'dest_long' = long) %>%
# add column for routes
mutate(route = paste(source_city, dest_city, sep = '-')) %>%
# only keep distinct routes
distinct(route, .keep_all = TRUE)
## Given a city and destination, generate schema
generateFlights <- function(source, dest) {
# obtain source city schema
source_schema <- flights %>%
filter(source_iata == source) %>%
dplyr::select(route, source_iata, source_long, source_lat)
dest_schema <- flights %>%
filter(dest_iata == dest) %>%
dplyr::select(dest_iata, dest_long, dest_lat)
final_schema <- cbind(source_schema[1, ], dest_schema[1, ])
return(final_schema)
}
# manual flights
manual_flights <- generateFlights(source = 'DCA', dest = 'CMN') %>%
rbind(generateFlights(source = 'CMN', dest = 'OPO'),
generateFlights(source = 'LHR', dest = 'MAA')
)
# flights taken since semester over
trip_flights <- flights %>%
filter(source_iata == 'SFO' & dest_iata == 'DCA' | # shohini to DC
source_iata == 'SFO' & dest_iata == 'DEN' | # jason, kiran to london
source_iata == 'DEN' & dest_iata == 'LHR' |
source_iata == 'LAX' & dest_iata == 'LHR' | # prabha to london
source_iata == 'SFO' & dest_iata == 'LHR' | # jeffrey, mihir to london
source_iata == 'LHR' & dest_iata == 'OPO' | # everyone to porto, technically stansted
source_iata == 'OPO' & dest_iata == 'LIS' | # everyone to lisbon
source_iata == 'LIS' & dest_iata == 'DXB'| # shohini to dubai
source_iata == 'DXB' & dest_iata == 'DEL' |
source_iata == 'LIS' & dest_iata == 'LHR' | # everyone to london, technically luton
source_iata == 'LHR' & dest_iata == 'BOM' | # jeffrey, mihir to mumbai
source_iata == 'LHR' & dest_iata == 'MUC' | # jason to munich
source_iata == 'MUC' & dest_iata == 'SFO') %>%  # jason to sfo
dplyr::select(route, source_iata, source_long, source_lat, dest_iata, dest_long, dest_lat) %>%
rbind(manual_flights)
# cities for plotting
cities <- airports %>%
filter(iata %in% trip_flights$source_iata | iata %in% trip_flights$dest_iata)
#############
### PLOT ####
#############
# get great circles for each flight
gc_routes <- geosphere::gcIntermediate(trip_flights[c("source_long", "source_lat")],
trip_flights[c("dest_long", "dest_lat")],
n = 360, addStartEnd = TRUE, sp = TRUE,
breakAtDateLine = TRUE)
gc_routes_spatial <- sp::SpatialLinesDataFrame(gc_routes,
data.frame(route = trip_flights$route,
stringsAsFactors = FALSE))
# load world shape file
world <- raster::shapefile('world/ne_110m_admin_0_countries_lakes.shp')
# convert to dataframe
world_df <- fortify(world)
gc_routes_df <- fortify(gc_routes_spatial)
ggplot() +
# world
geom_polygon(data = world_df, aes(long, lat, group = group),
fill = "grey80", color = "grey60", size = 0.1) +
# city points
geom_point(data = cities, aes(long, lat), color = "grey20", size = 0.5) +
# city text
geom_text(data = cities, aes(long, lat, label = city),
size = 3, color = "grey20", alpha = 0.9, nudge_y = 2,
check_overlap = TRUE) +
# routes
geom_path(data = gc_routes_df,
aes(long, lat, group = group), alpha = 0.5, color = "#fa6900") +
# aesthetics
coord_proj("+proj=kav7") +
scale_x_continuous(breaks = seq(-180, 180, 30)) +
scale_y_continuous(breaks = seq(-90, 90, 15)) +
theme(panel.grid.major = element_line(size = 0.5, linetype = 2),
axis.title = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank())
